CALL ctreate_user_post('ABRAMUS','test texta1',1);
CALL create_user_inpost('ABRAMUS','test texta1',1);
CALL ctreate_user_post('AFANAS','test texta2',1);
CALL create_user_inpost('AFANAS','test texta3',1);
CALL create_user_inpost('ABRAMUS','test texta2',2);

CREATE DEFINER=`muser`@`%` PROCEDURE `otus`.`create_user`(IN p_user_login text)
BEGIN
  DECLARE v_login text;
  SELECT user_login INTO v_login FROM users WHERE user_login = p_user_login;
  IF v_login IS NULL
    THEN 
      -- Начало транзакции
      START TRANSACTION;
        INSERT INTO users (user_login,user_rdate,user_st) values(p_user_login,now(),'ACTIVE');
      COMMIT;
  END IF;
END;

CREATE PROCEDURE otus.ctreate_user_post(
  IN p_user_login text,
  IN p_post_text text,
  IN p_source_id int)
BEGIN
  DECLARE v_user_id int;
  DECLARE v_post_id int;
    
    SELECT user_id INTO v_user_id FROM users WHERE user_login = p_user_login;
    IF v_user_id IS NULL THEN
      START TRANSACTION;
        INSERT INTO users(user_login,user_rdate,user_st)
          values(p_user_login,now(),'active');
      COMMIT;
      SELECT user_id INTO v_user_id FROM users WHERE user_login = p_user_login;
    END IF;

    SELECT post_id INTO v_post_id FROM post WHERE post_text = p_post_text;
    IF v_post_id IS NULL then
      START TRANSACTION;
        INSERT INTO post(post_text, post_desc, post_len,post_dt)
          values(p_post_text,'test',length(p_post_text),now());
      COMMIT;
      SELECT post_id INTO v_post_id FROM post WHERE post_text = p_post_text;
    END IF;

END;

CREATE PROCEDURE otus.create_user_inpost(
  IN p_user_login text,
  IN p_post_text text,
  IN p_source_id int)
BEGIN
  DECLARE v_user_id int;
  DECLARE v_post_id int;
  DECLARE v_inpost_id int;  
    SELECT user_id INTO v_user_id FROM users WHERE user_login = p_user_login;
    IF v_user_id IS NULL THEN
      START TRANSACTION;
        INSERT INTO users(user_login,user_rdate,user_st)
          values(p_user_login,now(),'active');
      COMMIT;
      SELECT user_id INTO v_user_id FROM users WHERE user_login = p_user_login;
    END IF;

    SELECT post_id INTO v_post_id FROM post WHERE post_text = p_post_text;
    IF v_post_id IS NULL then
      START TRANSACTION;
        INSERT INTO post(post_text, post_desc, post_len,post_dt)
          values(p_post_text,'test',length(p_post_text),now());
      COMMIT;
      SELECT post_id INTO v_post_id FROM post WHERE post_text = p_post_text;
    END IF;
    
    SELECT inpost_id INTO v_inpost_id FROM inpost WHERE post_id = v_post_id AND user_id = v_user_id AND source_id = p_source_id;
    IF v_inpost_id IS NULL THEN 
      START TRANSACTION;
        INSERT INTO inpost(user_id, post_id,inpost_dt,source_id)
          values(v_user_id,v_post_id,now(),p_source_id);
      COMMIT;
    END IF;
END;



ALTER TABLE post ADD FULLTEXT(post_text);
ALTER TABLE post ADD FULLTEXT(post_desc);








INSERT INTO post(post_text,post_desc,post_len)
values('жаден был наш куманёк', 'мудрость', length('жаден был наш куманёк') ),
      ('из-за острова на стрежень', 'загадка', length('из-за острова на стрежень') ),
      ('я ухожу, сказал парниша ей сквозь грусть, ты тока жди, я обязательно вернусь', 'бытовуха', length('я ухожу, сказал парниша ей сквозь грусть, ты тока жди, я обязательно вернусь') ),
      ('шамурдяк битви карлы мурлы утях', 'непередаваемая игра слов', length('шамурдяк битви карлы мурлы утях') )

explain 
select u.user_login, user_id, i.user_fio 
  from users u 
  left join info_user i using (user_id) 
 where user_login = 'mIkoLa';
 
explain 
SELECT * 
FROM post 
WHERE MATCH(post_text) AGAINST ('парниша' IN NATURAL LANGUAGE MODE); 




----------------------##----------------


-- Создание пользователя client
CREATE USER 'client'@'localhost' IDENTIFIED BY 'client_password';

-- Создание пользователя manager
CREATE USER 'manager'@'localhost' IDENTIFIED BY 'manager_password';

-- Процедура выборки постов
-- Эта процедура позволяет фильтровать посты по длине текста, наличию определённых слов (полный текстовый поиск), пользователю, а также поддерживает сортировку и постраничную выдачу.
CREATE PROCEDURE get_filtered_posts(
    IN p_min_len INT,               -- Минимальная длина текста
    IN p_max_len INT,               -- Максимальная длина текста
    IN p_words VARCHAR(500),      -- Слова для полнотекстового поиска
    IN p_login varchar(500), -- Фильтр по логину пользователя
    IN p_limit INT              -- Количество элементов на странице
)
BEGIN
    SELECT p.post_id, p.post_text, p.post_desc, p.post_len, i.inpost_id, i.inpost_dt, u.user_login, u.user_id 
      FROM inpost as i
     INNER JOIN post AS p using(post_id)
      LEFT JOIN users AS u using(user_id)
        WHERE 1=1
          AND (CASE WHEN p_min_len != 0 THEN p.post_len >= p_min_len ELSE 1=1 END)
          AND (CASE WHEN p_max_len != 0 THEN p.post_len <= p_max_len ELSE 1=1 END)
          AND (CASE WHEN p_login != 'NONE' THEN u.user_login = p_login ELSE 1=1 end)
          AND (CASE WHEN p_words != 'NONE' OR p_words != '' THEN MATCH(post_text) AGAINST(p_words IN NATURAL LANGUAGE MODE) ELSE 1=1 END)
        LIMIT p_limit;
END;
-- Процедура выборки постов
CREATE PROCEDURE get_filtered_posts_more(
    IN p_min_len INT,               -- Минимальная длина текста
    IN p_max_len INT,               -- Максимальная длина текста
    IN p_words VARCHAR(500),        -- Слова для полнотекстового поиска
    IN p_login varchar(500),        -- Фильтр по логину пользователя
    IN p_field varchar(20),         -- Порядок полей через запятую 1-8, пример '1,3,4;
    IN p_sort VARCHAR(10),          -- Порядок сортировки (ASC/DESC)
    IN p_limit INT                  -- Количество элементов на странице
)
BEGIN
    SET @query = CONCAT(' 
    SELECT p.post_id, p.post_text, p.post_desc, p.post_len, i.inpost_id, i.inpost_dt, u.user_login, u.user_id 
      FROM inpost as i
     INNER JOIN post AS p using(post_id)
      LEFT JOIN users AS u using(user_id)
        WHERE 1=1
          AND ', IF(p_min_len != 0, ' p.post_len >= '||p_min_len, '1=1'),
        ' AND ', IF(p_max_len != 0, ' p.post_len <= '||p_max_len, '1=1'),
        ' AND ', IF(p_login != 'NONE', ' u.user_login = '||p_login, '1=1'),
        ' AND ', IF(p_words !=  'NONE' OR p_words !=  '', ' MATCH(post_text) AGAINST('||quote(p_words)||' IN NATURAL LANGUAGE MODE) ', '1 = 1'),
      ' ORDER BY ', IF(p_field !=  'NONE' OR p_field !=  '', p_field, ''), ' ',p_sort,        
        ' LIMIT ', p_limit);
 --   PREPARE stmt FROM @query;
 --   EXECUTE stmt;
--    DEALLOCATE PREPARE stmt;
    SELECT @query;
END;

CALL get_filtered_posts_more(0,0,'','NONE','1,2,3','ASC',2);
CALL get_filtered_posts(3,15,'test','NONE',3);


-- Процедура отчета по постам
-- Эта процедура позволяет просматривать отчет по постам за определенный период с группировкой по длине текста, source_id или пользователю.

CREATE PROCEDURE get_posts(
    IN period VARCHAR(50),            -- Период (hour/day/week)
    IN group_by VARCHAR(50)           -- Группировка (post_len/source_id/user_id)
)
BEGIN
    IF period = 'hour' THEN
        SET @period_condition = 'AND HOUR(inpost_dt) = HOUR(NOW())';
    ELSEIF period = 'day' THEN
        SET @period_condition = 'AND DATE(inpost_dt) = CURDATE()';
    ELSEIF period = 'week' THEN
        SET @period_condition = 'AND WEEK(inpost_dt) = WEEK(NOW())';
    ELSEIF period = 'year' THEN 
        SET @period_condition = 'AND YEAR(inpost_dt) = YEAR(NOW())'; 
    ELSE
        SET @period_condition = '';
    END IF;

    SET @query = CONCAT(
        'SELECT p.post_len, 
                i.source_id, 
                i.inpost_dt,
                i.user_id, 
                u.user_login,
                COUNT(*) AS total_posts
           FROM inpost i 
          INNER JOIN post p ON i.post_id = p.post_id
          INNER JOIN users u ON u.user_id = i.user_id
          WHERE 1=1 ', @period_condition,
        ' GROUP BY 1,2,3,4,5
          ORDER BY ',group_by
    );
    PREPARE stmt FROM @query;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END;

CALL get_posts('year', 'user_id');









SELECT p.post_len, 
                i.source_id, 
                i.inpost_dt,
                i.user_id, 
                u.user_login,
                COUNT(*) AS total_posts
           FROM inpost i 
          INNER JOIN post p ON i.post_id = p.post_id
          INNER JOIN users u ON u.user_id = i.user_id
          WHERE 1=1 AND YEAR(post_dt) = YEAR(now()) GROUP BY 1,2,3,4,5
          ORDER BY user_id

SELECT p.post_len, 
                i.source_id, 
                i.user_id, 
                u.user_login,
                COUNT(*) AS total_posts
           FROM inpost i 
          INNER JOIN post p ON i.post_id = p.post_id
          INNER JOIN users u ON u.user_id = i.user_id
          WHERE 1=1 
            AND DATE(post_dt) = CURDATE() 
          GROUP BY 1,2,3,4
           ORDER BY user_id
 
           
           
           
           
    SELECT p.post_id, p.post_text, p.post_desc, p.post_len, i.inpost_id, i.inpost_dt, u.user_login, u.user_id 
      FROM inpost as i
     INNER JOIN post AS p using(post_id)
      LEFT JOIN users AS u using(user_id)
        WHERE 1=1
          AND 1=1 AND 1=1 AND 1=1 AND 0 ORDER BY 1,2,3 ASC LIMIT 2
 
          
SELECT post_id, post_text, post_desc, post_len, inpost_dt, user_login 
      FROM inpost 
     INNER JOIN post using(post_id)
      LEFT JOIN users using(user_id)
     WHERE CASE WHEN post_len
 
    SELECT p.post_id, p.post_text, p.post_desc, p.post_len, i.inpost_id, i.inpost_dt, u.user_login, u.user_id 
      FROM inpost as i
     INNER JOIN post AS p using(post_id)
      LEFT JOIN users AS u using(user_id)
        WHERE 1=1
          AND (CASE WHEN 3 != 0 THEN p.post_len >= 3 ELSE 1=1 END)
          AND (CASE WHEN 7 != 0 THEN p.post_len <= 7 ELSE 1=1 END)
          AND (CASE WHEN 'NONE' != 'NONE' THEN u.user_login = 'ee' ELSE 1=1 end)
          AND (CASE WHEN 'test' != 'NONE' OR 'test' != '' THEN MATCH(post_text) AGAINST('test' IN NATURAL LANGUAGE MODE) ELSE 1=1 END)
        ORDER BY 1 if('ASC' = 'ASC', ASC, DESC)
        LIMIT 2;     
     

CALL get_filtered_posts_more(0,0,'','NONE','1,2,3','ASC',2);
